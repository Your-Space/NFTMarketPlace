// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Nethereum.Metamask.Blazor
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Metamask\Nethereum.Metamask.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Metamask;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Erc20.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Metamask.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.JsonRpc.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Web3;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Hex.HexTypes;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Siwe.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using System.Numerics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using NftContractHandler;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using NftProject.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using System.Runtime.CompilerServices;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
using Nethereum.Web3.Accounts.Managed;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class ShowNft : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 86 "D:\Metamask\Nethereum.Metamask.Blazor\ShowNft.razor"
      
    public IEnumerable<NftViewModel> Nfts { get; set; }
    bool EthereumAvailable { get; set; }
        string SelectedAccount { get; set; }
        BigInteger SelectedChainId { get; set; }

            protected override async Task OnAfterRenderAsync(bool firstTime)
        {
            if (firstTime)
            {
        
                _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;
                _ethereumHostProvider.NetworkChanged += HostProvider_NetworkChanged;
                _ethereumHostProvider.EnabledChanged += HostProviderOnEnabledChanged;

                EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
            }
        }

    public bool col()
    {
        return collect().Result;
    }

    public async Task<bool> collect()
    {
        if (EthereumAvailable == true && !string.IsNullOrEmpty(SelectedAccount))
        {
        //var web3 = new Web3();
            //Account account = new Account();
            //ManagedAccount account = new ManagedAccount();
            
            _testExample.Web3 = await _ethereumHostProvider.GetWeb3Async();
            // _testExample.Web3.TransactionManager = _ethereumHostProvider.GetWeb3Async().Result.TransactionManager;
            // _testExample.Web3.TransactionManager.Client = _ethereumHostProvider.GetWeb3Async().Result.TransactionManager.Client;
            // // _testExample.Web3.Client = _ethereumHostProvider.GetWeb3Async().Result.TransactionManager.Client;
           // _testExample.Web3.TransactionManager = Client;
            // var ListingPrice = _testExample.Service.GetListingPriceQueryAsync().Result;
            Console.WriteLine("Here " + await _testExample.Service.TokenURIQueryAsync(6));
    //_testExample.Service.FetchMyNFTsQueryAsync().
            Console.WriteLine("Another ");
            var a = await _testExample.Service.GetListingPriceQueryAsync();
            Console.Write(a.ToString());
            var m = await _testExample.Service.FetchMyNFTsQueryAsync();
            var marketItems = m.ReturnValue1;
            Console.WriteLine(marketItems.ToString());
            Console.WriteLine(111);    
            List<NftViewModel> metaSet = new List<NftViewModel>(marketItems.Count); //I NEED TOKEN ID
            foreach (var item in marketItems)
            {
                NftViewModel tmp = new NftViewModel();
                tmp.NftMetadata = await ReadJsonFromWeb(item.TokenId);
                tmp.TokenId = item.TokenId;
                metaSet.Add(tmp); 
            }
            Nfts = metaSet;
            return true;
        }
        return false;
    }

    private async Task<NftMetadataModel> ReadJsonFromWeb(BigInteger id)
    {
        string uri = await _testExample.Service.TokenURIQueryAsync(id);

    //reading metadata json from web 
        HttpWebRequest request = WebRequest.Create(uri) as HttpWebRequest;
        WebResponse resp = request.GetResponse();
        StreamReader reader = new StreamReader(resp.GetResponseStream());
        string jsonText = reader.ReadToEnd();

        NftMetadataModel NftMetadata = JsonConvert.DeserializeObject<NftMetadataModel>(jsonText);
        return NftMetadata;
    }
    
        private async Task HostProviderOnEnabledChanged(bool enabled)
        {
            if (enabled)
            {
                await GetChainId();
                this.StateHasChanged();
            }
        }

        private async Task GetChainId()
        {
            var web3 = await _ethereumHostProvider.GetWeb3Async();
            var chainId = await web3.Eth.ChainId.SendRequestAsync();
            SelectedChainId = (BigInteger) chainId.Value;
        }

        private async Task HostProvider_SelectedAccountChanged(string account)
        {

            SelectedAccount = account;
            await GetChainId();

            await collect();

            this.StateHasChanged();
        }

        private async Task HostProvider_NetworkChanged(int chainId)
        {
            SelectedChainId = chainId;
            this.StateHasChanged();
            await Task.CompletedTask;
        }
        


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TestExample _testExample { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager _navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NethereumSiweAuthenticatorService _nethereumSiweAuthenticatorService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IEthereumHostProvider _ethereumHostProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
